// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package server is a generated GoMock package.
package server

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockResultStorer is a mock of ResultStorer interface
type MockResultStorer struct {
	ctrl     *gomock.Controller
	recorder *MockResultStorerMockRecorder
}

// MockResultStorerMockRecorder is the mock recorder for MockResultStorer
type MockResultStorerMockRecorder struct {
	mock *MockResultStorer
}

// NewMockResultStorer creates a new mock instance
func NewMockResultStorer(ctrl *gomock.Controller) *MockResultStorer {
	mock := &MockResultStorer{ctrl: ctrl}
	mock.recorder = &MockResultStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResultStorer) EXPECT() *MockResultStorerMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockResultStorer) Save(result string) error {
	ret := m.ctrl.Call(m, "Save", result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockResultStorerMockRecorder) Save(result interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockResultStorer)(nil).Save), result)
}

// MockSumStorer is a mock of SumStorer interface
type MockSumStorer struct {
	ctrl     *gomock.Controller
	recorder *MockSumStorerMockRecorder
}

// MockSumStorerMockRecorder is the mock recorder for MockSumStorer
type MockSumStorerMockRecorder struct {
	mock *MockSumStorer
}

// NewMockSumStorer creates a new mock instance
func NewMockSumStorer(ctrl *gomock.Controller) *MockSumStorer {
	mock := &MockSumStorer{ctrl: ctrl}
	mock.recorder = &MockSumStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSumStorer) EXPECT() *MockSumStorerMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockSumStorer) Save(numberOne, numberTwo int64) error {
	ret := m.ctrl.Call(m, "Save", numberOne, numberTwo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockSumStorerMockRecorder) Save(numberOne, numberTwo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSumStorer)(nil).Save), numberOne, numberTwo)
}
