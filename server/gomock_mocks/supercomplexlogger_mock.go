// Code generated by MockGen. DO NOT EDIT.
// Source: supercomplexlogger.go

// Package server is a generated GoMock package.
package server

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSuperComplexLogger is a mock of SuperComplexLogger interface
type MockSuperComplexLogger struct {
	ctrl     *gomock.Controller
	recorder *MockSuperComplexLoggerMockRecorder
}

// MockSuperComplexLoggerMockRecorder is the mock recorder for MockSuperComplexLogger
type MockSuperComplexLoggerMockRecorder struct {
	mock *MockSuperComplexLogger
}

// NewMockSuperComplexLogger creates a new mock instance
func NewMockSuperComplexLogger(ctrl *gomock.Controller) *MockSuperComplexLogger {
	mock := &MockSuperComplexLogger{ctrl: ctrl}
	mock.recorder = &MockSuperComplexLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSuperComplexLogger) EXPECT() *MockSuperComplexLoggerMockRecorder {
	return m.recorder
}

// Log mocks base method
func (m *MockSuperComplexLogger) Log(message string) {
	m.ctrl.Call(m, "Log", message)
}

// Log indicates an expected call of Log
func (mr *MockSuperComplexLoggerMockRecorder) Log(message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockSuperComplexLogger)(nil).Log), message)
}

// SuperLog mocks base method
func (m *MockSuperComplexLogger) SuperLog(message string) (string, int, int, error) {
	ret := m.ctrl.Call(m, "SuperLog", message)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// SuperLog indicates an expected call of SuperLog
func (mr *MockSuperComplexLoggerMockRecorder) SuperLog(message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuperLog", reflect.TypeOf((*MockSuperComplexLogger)(nil).SuperLog), message)
}
